// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goasnmp HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goasnmp "github.com/rshade/goasnmp/gen/goasnmp"
	goasnmpviews "github.com/rshade/goasnmp/gen/goasnmp/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "goasnmp" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListGoasnmpPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goasnmp", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the goasnmp
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goasnmp", "list", err)
			}
			p := NewListHostCollectionOK(body)
			view := "default"
			vres := goasnmpviews.HostCollection{Projected: p, View: view}
			if err = goasnmpviews.ValidateHostCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("goasnmp", "list", err)
			}
			res := goasnmp.NewHostCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goasnmp", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "goasnmp" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		hostname string
	)
	{
		p, ok := v.(*goasnmp.AddPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("goasnmp", "add", "*goasnmp.AddPayload", v)
		}
		hostname = p.Hostname
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddGoasnmpPath(hostname)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goasnmp", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the goasnmp add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*goasnmp.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("goasnmp", "add", "*goasnmp.AddPayload", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("goasnmp", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the goasnmp
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goasnmp", "add", err)
			}
			p := NewAddHostOK(&body)
			view := "default"
			vres := &goasnmpviews.Host{Projected: p, View: view}
			if err = goasnmpviews.ValidateHost(vres); err != nil {
				return nil, goahttp.ErrValidationError("goasnmp", "add", err)
			}
			res := goasnmp.NewHost(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goasnmp", "add", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHostResponseToGoasnmpviewsHostView builds a value of type
// *goasnmpviews.HostView from a value of type *HostResponse.
func unmarshalHostResponseToGoasnmpviewsHostView(v *HostResponse) *goasnmpviews.HostView {
	res := &goasnmpviews.HostView{
		Public:   v.Public,
		OnDemand: v.OnDemand,
	}

	return res
}
