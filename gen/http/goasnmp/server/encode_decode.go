// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goasnmp HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package server

import (
	"context"
	"io"
	"net/http"

	goasnmpviews "github.com/rshade/goasnmp/gen/goasnmp/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the goasnmp
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(goasnmpviews.HostCollection)
		enc := encoder(ctx, w)
		body := NewHostResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAddResponse returns an encoder for responses returned by the goasnmp
// add endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*goasnmpviews.Host)
		enc := encoder(ctx, w)
		body := NewAddResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the goasnmp add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body struct {
				// Whether or not to walk public tree
				Public *bool `form:"Public" json:"Public" xml:"Public"`
				// Whether or not Ondemand polling is supported
				OnDemand *bool `form:"OnDemand" json:"OnDemand" xml:"OnDemand"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			hostname string

			params = mux.Vars(r)
		)
		hostname = params["Hostname"]
		payload := NewAddPayload(body, hostname)

		return payload, nil
	}
}

// marshalGoasnmpviewsHostViewToHostResponse builds a value of type
// *HostResponse from a value of type *goasnmpviews.HostView.
func marshalGoasnmpviewsHostViewToHostResponse(v *goasnmpviews.HostView) *HostResponse {
	res := &HostResponse{
		Public:   v.Public,
		OnDemand: v.OnDemand,
	}

	return res
}
