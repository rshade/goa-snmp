// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goa-snmp HTTP server types
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package server

import (
	goasnmp "github.com/rshade/goasnmp/gen/goa_snmp"
	goasnmpviews "github.com/rshade/goasnmp/gen/goa_snmp/views"
)

// HostResponseCollection is the type of the "goa-snmp" service "list" endpoint
// HTTP response body.
type HostResponseCollection []*HostResponse

// AddResponseBody is the type of the "goa-snmp" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// Whether or not to walk public tree
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether or not Ondemand polling is supported
	OnDemand *bool `form:"on_demand,omitempty" json:"on_demand,omitempty" xml:"on_demand,omitempty"`
}

// HostResponse is used to define fields on response body types.
type HostResponse struct {
	// Whether or not to walk public tree
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether or not Ondemand polling is supported
	OnDemand *bool `form:"on_demand,omitempty" json:"on_demand,omitempty" xml:"on_demand,omitempty"`
}

// NewHostResponseCollection builds the HTTP response body from the result of
// the "list" endpoint of the "goa-snmp" service.
func NewHostResponseCollection(res goasnmpviews.HostCollectionView) HostResponseCollection {
	body := make([]*HostResponse, len(res))
	for i, val := range res {
		body[i] = marshalGoasnmpviewsHostViewToHostResponse(val)
	}
	return body
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "goa-snmp" service.
func NewAddResponseBody(res *goasnmpviews.HostView) *AddResponseBody {
	body := &AddResponseBody{
		Public:   res.Public,
		OnDemand: res.OnDemand,
	}
	return body
}

// NewAddPayload builds a goa-snmp service add endpoint payload.
func NewAddPayload(body struct {
	// Whether or not to walk public tree
	Public *bool `form:"Public" json:"Public" xml:"Public"`
	// Whether or not Ondemand polling is supported
	OnDemand *bool `form:"OnDemand" json:"OnDemand" xml:"OnDemand"`
}, hostname string) *goasnmp.AddPayload {
	v := &goasnmp.AddPayload{
		OnDemand: body.OnDemand,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	v.Hostname = hostname

	return v
}
