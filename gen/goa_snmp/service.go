// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goa-snmp service
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package goasnmp

import (
	"context"

	goasnmpviews "github.com/rshade/goasnmp/gen/goa_snmp/views"
)

// The goa-snmp service tracks hosts and walks snmp trees
type Service interface {
	// List implements list.
	List(context.Context) (res HostCollection, err error)
	// Add implements add.
	Add(context.Context, *AddPayload) (res *Host, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "goa-snmp"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"list", "add"}

// HostCollection is the result type of the goa-snmp service list method.
type HostCollection []*Host

// AddPayload is the payload type of the goa-snmp service add method.
type AddPayload struct {
	// Hostname or Ip of Device
	Hostname string
	// Whether or not to walk public tree
	Public bool
	// Whether or not Ondemand polling is supported
	OnDemand *bool
}

// Host is the result type of the goa-snmp service add method.
type Host struct {
	// Whether or not to walk public tree
	Public *bool
	// Whether or not Ondemand polling is supported
	OnDemand *bool
}

// NewHostCollection initializes result type HostCollection from viewed result
// type HostCollection.
func NewHostCollection(vres goasnmpviews.HostCollection) HostCollection {
	return newHostCollection(vres.Projected)
}

// NewViewedHostCollection initializes viewed result type HostCollection from
// result type HostCollection using the given view.
func NewViewedHostCollection(res HostCollection, view string) goasnmpviews.HostCollection {
	p := newHostCollectionView(res)
	return goasnmpviews.HostCollection{Projected: p, View: "default"}
}

// NewHost initializes result type Host from viewed result type Host.
func NewHost(vres *goasnmpviews.Host) *Host {
	return newHost(vres.Projected)
}

// NewViewedHost initializes viewed result type Host from result type Host
// using the given view.
func NewViewedHost(res *Host, view string) *goasnmpviews.Host {
	p := newHostView(res)
	return &goasnmpviews.Host{Projected: p, View: "default"}
}

// newHostCollection converts projected type HostCollection to service type
// HostCollection.
func newHostCollection(vres goasnmpviews.HostCollectionView) HostCollection {
	res := make(HostCollection, len(vres))
	for i, n := range vres {
		res[i] = newHost(n)
	}
	return res
}

// newHostCollectionView projects result type HostCollection to projected type
// HostCollectionView using the "default" view.
func newHostCollectionView(res HostCollection) goasnmpviews.HostCollectionView {
	vres := make(goasnmpviews.HostCollectionView, len(res))
	for i, n := range res {
		vres[i] = newHostView(n)
	}
	return vres
}

// newHost converts projected type Host to service type Host.
func newHost(vres *goasnmpviews.HostView) *Host {
	res := &Host{
		Public:   vres.Public,
		OnDemand: vres.OnDemand,
	}
	return res
}

// newHostView projects result type Host to projected type HostView using the
// "default" view.
func newHostView(res *Host) *goasnmpviews.HostView {
	vres := &goasnmpviews.HostView{
		Public:   res.Public,
		OnDemand: res.OnDemand,
	}
	return vres
}
