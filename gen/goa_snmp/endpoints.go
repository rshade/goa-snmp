// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goa-snmp endpoints
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package goasnmp

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "goa-snmp" service endpoints.
type Endpoints struct {
	List endpoint.Endpoint
	Add  endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "goa-snmp" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List: NewListEndpoint(s),
		Add:  NewAddEndpoint(s),
	}
}

// Use applies the given middleware to all the "goa-snmp" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.List = m(e.List)
	e.Add = m(e.Add)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "goa-snmp".
func NewListEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.List(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedHostCollection(res, "default")
		return vres, nil
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "goa-snmp".
func NewAddEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddPayload)
		res, err := s.Add(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedHost(res, "default")
		return vres, nil
	}
}
