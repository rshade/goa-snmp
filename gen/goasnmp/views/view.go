// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goasnmp views
//
// Command:
// $ goa gen github.com/rshade/goasnmp/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// HostCollection is the viewed result type that is projected based on a view.
type HostCollection struct {
	// Type to project
	Projected HostCollectionView
	// View to render
	View string
}

// Host is the viewed result type that is projected based on a view.
type Host struct {
	// Type to project
	Projected *HostView
	// View to render
	View string
}

// HostCollectionView is a type that runs validations on a projected type.
type HostCollectionView []*HostView

// HostView is a type that runs validations on a projected type.
type HostView struct {
	// Whether or not to walk public tree
	Public *bool
	// Whether or not Ondemand polling is supported
	OnDemand *bool
}

var (
	// HostCollectionMap is a map of attribute names in result type HostCollection
	// indexed by view name.
	HostCollectionMap = map[string][]string{
		"default": []string{
			"public",
			"on_demand",
		},
	}
	// HostMap is a map of attribute names in result type Host indexed by view name.
	HostMap = map[string][]string{
		"default": []string{
			"public",
			"on_demand",
		},
	}
)

// ValidateHostCollection runs the validations defined on the viewed result
// type HostCollection.
func ValidateHostCollection(result HostCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateHostCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateHost runs the validations defined on the viewed result type Host.
func ValidateHost(result *Host) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateHostView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateHostCollectionView runs the validations defined on
// HostCollectionView using the "default" view.
func ValidateHostCollectionView(result HostCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateHostView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateHostView runs the validations defined on HostView using the
// "default" view.
func ValidateHostView(result *HostView) (err error) {

	return
}
